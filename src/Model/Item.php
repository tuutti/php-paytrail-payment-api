<?php
/**
 * Item
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Model;

use \ArrayAccess;
use \Paytrail\Payment\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_price' => 'int',
        'units' => 'int',
        'vat_percentage' => 'int',
        'product_code' => 'string',
        'delivery_date' => '\DateTime',
        'description' => 'string',
        'category' => 'string',
        'merchant' => 'string',
        'stamp' => 'string',
        'reference' => 'string',
        'order_id' => 'string',
        'commission' => '\Paytrail\Payment\Model\ItemCommission'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_price' => 'int64',
        'units' => 'int64',
        'vat_percentage' => 'int64',
        'product_code' => null,
        'delivery_date' => 'date',
        'description' => null,
        'category' => null,
        'merchant' => null,
        'stamp' => null,
        'reference' => null,
        'order_id' => null,
        'commission' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_price' => false,
		'units' => false,
		'vat_percentage' => false,
		'product_code' => false,
		'delivery_date' => false,
		'description' => false,
		'category' => false,
		'merchant' => false,
		'stamp' => false,
		'reference' => false,
		'order_id' => false,
		'commission' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_price' => 'unitPrice',
        'units' => 'units',
        'vat_percentage' => 'vatPercentage',
        'product_code' => 'productCode',
        'delivery_date' => 'deliveryDate',
        'description' => 'description',
        'category' => 'category',
        'merchant' => 'merchant',
        'stamp' => 'stamp',
        'reference' => 'reference',
        'order_id' => 'orderId',
        'commission' => 'commission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_price' => 'setUnitPrice',
        'units' => 'setUnits',
        'vat_percentage' => 'setVatPercentage',
        'product_code' => 'setProductCode',
        'delivery_date' => 'setDeliveryDate',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'merchant' => 'setMerchant',
        'stamp' => 'setStamp',
        'reference' => 'setReference',
        'order_id' => 'setOrderId',
        'commission' => 'setCommission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_price' => 'getUnitPrice',
        'units' => 'getUnits',
        'vat_percentage' => 'getVatPercentage',
        'product_code' => 'getProductCode',
        'delivery_date' => 'getDeliveryDate',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'merchant' => 'getMerchant',
        'stamp' => 'getStamp',
        'reference' => 'getReference',
        'order_id' => 'getOrderId',
        'commission' => 'getCommission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_price', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('vat_percentage', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('delivery_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('merchant', $data ?? [], null);
        $this->setIfExists('stamp', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_price'] === null) {
            $invalidProperties[] = "'unit_price' can't be null";
        }
        if (($this->container['unit_price'] > 99999999)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be smaller than or equal to 99999999.";
        }

        if (($this->container['unit_price'] < 0)) {
            $invalidProperties[] = "invalid value for 'unit_price', must be bigger than or equal to 0.";
        }

        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        if (($this->container['units'] > 10000000)) {
            $invalidProperties[] = "invalid value for 'units', must be smaller than or equal to 10000000.";
        }

        if (($this->container['units'] < 1)) {
            $invalidProperties[] = "invalid value for 'units', must be bigger than or equal to 1.";
        }

        if ($this->container['vat_percentage'] === null) {
            $invalidProperties[] = "'vat_percentage' can't be null";
        }
        if (($this->container['vat_percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'vat_percentage', must be smaller than or equal to 100.";
        }

        if (($this->container['vat_percentage'] < 0)) {
            $invalidProperties[] = "invalid value for 'vat_percentage', must be bigger than or equal to 0.";
        }

        if ($this->container['product_code'] === null) {
            $invalidProperties[] = "'product_code' can't be null";
        }
        if ((mb_strlen($this->container['product_code']) > 100)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 1000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['category']) && (mb_strlen($this->container['category']) > 100)) {
            $invalidProperties[] = "invalid value for 'category', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['merchant']) && (mb_strlen($this->container['merchant']) > 10)) {
            $invalidProperties[] = "invalid value for 'merchant', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['stamp']) && (mb_strlen($this->container['stamp']) > 200)) {
            $invalidProperties[] = "invalid value for 'stamp', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 200)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 60)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_price
     *
     * @return int
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param int $unit_price Unit price of an item in currency minor unit, eg. EUR cents. VAT should be included in amount unless `usePricesWithoutVat` is set to true.
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        if (is_null($unit_price)) {
            throw new \InvalidArgumentException('non-nullable unit_price cannot be null');
        }

        if (($unit_price > 99999999)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling Item., must be smaller than or equal to 99999999.');
        }
        if (($unit_price < 0)) {
            throw new \InvalidArgumentException('invalid value for $unit_price when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets units
     *
     * @return int
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param int $units Number of units
     *
     * @return self
     */
    public function setUnits($units)
    {
        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }

        if (($units > 10000000)) {
            throw new \InvalidArgumentException('invalid value for $units when calling Item., must be smaller than or equal to 10000000.');
        }
        if (($units < 1)) {
            throw new \InvalidArgumentException('invalid value for $units when calling Item., must be bigger than or equal to 1.');
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets vat_percentage
     *
     * @return int
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param int $vat_percentage Item VAT percentage
     *
     * @return self
     */
    public function setVatPercentage($vat_percentage)
    {
        if (is_null($vat_percentage)) {
            throw new \InvalidArgumentException('non-nullable vat_percentage cannot be null');
        }

        if (($vat_percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $vat_percentage when calling Item., must be smaller than or equal to 100.');
        }
        if (($vat_percentage < 0)) {
            throw new \InvalidArgumentException('invalid value for $vat_percentage when calling Item., must be bigger than or equal to 0.');
        }

        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string $product_code Merchant specific product code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        if ((mb_strlen($product_code) > 100)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling Item., must be smaller than or equal to 100.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime|null
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime|null $delivery_date Estimated delivery date
     *
     * @return self
     */
    public function setDeliveryDate($delivery_date)
    {
        if (is_null($delivery_date)) {
            throw new \InvalidArgumentException('non-nullable delivery_date cannot be null');
        }
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Merchant specific product description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Item., must be smaller than or equal to 1000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Item product category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        if ((mb_strlen($category) > 100)) {
            throw new \InvalidArgumentException('invalid length for $category when calling Item., must be smaller than or equal to 100.');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return string|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param string|null $merchant Submerchant ID. Required for shop-in-shop payments, leave out from normal payments.
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        if (is_null($merchant)) {
            throw new \InvalidArgumentException('non-nullable merchant cannot be null');
        }
        if ((mb_strlen($merchant) > 10)) {
            throw new \InvalidArgumentException('invalid length for $merchant when calling Item., must be smaller than or equal to 10.');
        }

        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets stamp
     *
     * @return string|null
     */
    public function getStamp()
    {
        return $this->container['stamp'];
    }

    /**
     * Sets stamp
     *
     * @param string|null $stamp Submerchant specific unique stamp. Required for shop-in-shop payments, leave out from normal payments.
     *
     * @return self
     */
    public function setStamp($stamp)
    {
        if (is_null($stamp)) {
            throw new \InvalidArgumentException('non-nullable stamp cannot be null');
        }
        if ((mb_strlen($stamp) > 200)) {
            throw new \InvalidArgumentException('invalid length for $stamp when calling Item., must be smaller than or equal to 200.');
        }

        $this->container['stamp'] = $stamp;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Submerchant reference for the item. Required for shop-in-shop payments, leave out from normal payments.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        if ((mb_strlen($reference) > 200)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Item., must be smaller than or equal to 200.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order ID. Used for eg. Collector payments order ID. If not given, merchant reference is used instead.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        if ((mb_strlen($order_id) > 60)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling Item., must be smaller than or equal to 60.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return \Paytrail\Payment\Model\ItemCommission|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param \Paytrail\Payment\Model\ItemCommission|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


