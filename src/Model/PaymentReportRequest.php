<?php
/**
 * PaymentReportRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Model;

use \ArrayAccess;
use \Paytrail\Payment\ObjectSerializer;

/**
 * PaymentReportRequest Class Doc Comment
 *
 * @category Class
 * @description Payment report request
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PaymentReportRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentReportRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_type' => 'string',
        'callback_url' => 'string',
        'payment_status' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'limit' => 'int',
        'report_fields' => 'string[]',
        'submerchant' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_type' => null,
        'callback_url' => 'url',
        'payment_status' => null,
        'start_date' => 'datetime',
        'end_date' => 'datetime',
        'limit' => null,
        'report_fields' => null,
        'submerchant' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'request_type' => false,
		'callback_url' => false,
		'payment_status' => false,
		'start_date' => false,
		'end_date' => false,
		'limit' => false,
		'report_fields' => false,
		'submerchant' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_type' => 'requestType',
        'callback_url' => 'callbackUrl',
        'payment_status' => 'paymentStatus',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'limit' => 'limit',
        'report_fields' => 'reportFields',
        'submerchant' => 'submerchant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_type' => 'setRequestType',
        'callback_url' => 'setCallbackUrl',
        'payment_status' => 'setPaymentStatus',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'limit' => 'setLimit',
        'report_fields' => 'setReportFields',
        'submerchant' => 'setSubmerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_type' => 'getRequestType',
        'callback_url' => 'getCallbackUrl',
        'payment_status' => 'getPaymentStatus',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'limit' => 'getLimit',
        'report_fields' => 'getReportFields',
        'submerchant' => 'getSubmerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REQUEST_TYPE_JSON = 'json';
    public const REQUEST_TYPE_CSV = 'csv';
    public const PAYMENT_STATUS__DEFAULT = 'default';
    public const PAYMENT_STATUS_ALL = 'all';
    public const PAYMENT_STATUS_PAID = 'paid';
    public const PAYMENT_STATUS_SETTLED = 'settled';
    public const REPORT_FIELDS_ENTRY_DATE = 'entryDate';
    public const REPORT_FIELDS_CREATED = 'created';
    public const REPORT_FIELDS_AMOUNT = 'amount';
    public const REPORT_FIELDS_STATUS = 'status';
    public const REPORT_FIELDS_FIRSTNAME = 'firstname';
    public const REPORT_FIELDS_FAMILYNAME = 'familyname';
    public const REPORT_FIELDS_DESCRIPTION = 'description';
    public const REPORT_FIELDS_REFERENCE = 'reference';
    public const REPORT_FIELDS_PAYMENT_METHOD = 'paymentMethod';
    public const REPORT_FIELDS_STAMP = 'stamp';
    public const REPORT_FIELDS_ADDRESS = 'address';
    public const REPORT_FIELDS_POSTCODE = 'postcode';
    public const REPORT_FIELDS_POSTOFFICE = 'postoffice';
    public const REPORT_FIELDS_COUNTRY = 'country';
    public const REPORT_FIELDS_CHECKOUT_REFERENCE = 'checkoutReference';
    public const REPORT_FIELDS_ARCHIVE_NUMBER = 'archiveNumber';
    public const REPORT_FIELDS_PAYER_NAME = 'payerName';
    public const REPORT_FIELDS_SETTLEMENT_ID = 'settlementId';
    public const REPORT_FIELDS_SETTLEMENT_DATE = 'settlementDate';
    public const REPORT_FIELDS_ORIGINAL_TRADE_REFERENCE = 'originalTradeReference';
    public const REPORT_FIELDS_VAT_PERCENTAGE = 'vatPercentage';
    public const REPORT_FIELDS_VAT_AMOUNT = 'vatAmount';
    public const REPORT_FIELDS_PAYMENT_METHOD_FEE = 'paymentMethodFee';
    public const REPORT_FIELDS_PAYMENT_METHOD_COMMISSION = 'paymentMethodCommission';
    public const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION = 'shopInShopCommission';
    public const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE = 'shopInShopCommissionVatPercentage';
    public const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT = 'shopInShopCommissionVatAmount';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestTypeAllowableValues()
    {
        return [
            self::REQUEST_TYPE_JSON,
            self::REQUEST_TYPE_CSV,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS__DEFAULT,
            self::PAYMENT_STATUS_ALL,
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_SETTLED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportFieldsAllowableValues()
    {
        return [
            self::REPORT_FIELDS_ENTRY_DATE,
            self::REPORT_FIELDS_CREATED,
            self::REPORT_FIELDS_AMOUNT,
            self::REPORT_FIELDS_STATUS,
            self::REPORT_FIELDS_FIRSTNAME,
            self::REPORT_FIELDS_FAMILYNAME,
            self::REPORT_FIELDS_DESCRIPTION,
            self::REPORT_FIELDS_REFERENCE,
            self::REPORT_FIELDS_PAYMENT_METHOD,
            self::REPORT_FIELDS_STAMP,
            self::REPORT_FIELDS_ADDRESS,
            self::REPORT_FIELDS_POSTCODE,
            self::REPORT_FIELDS_POSTOFFICE,
            self::REPORT_FIELDS_COUNTRY,
            self::REPORT_FIELDS_CHECKOUT_REFERENCE,
            self::REPORT_FIELDS_ARCHIVE_NUMBER,
            self::REPORT_FIELDS_PAYER_NAME,
            self::REPORT_FIELDS_SETTLEMENT_ID,
            self::REPORT_FIELDS_SETTLEMENT_DATE,
            self::REPORT_FIELDS_ORIGINAL_TRADE_REFERENCE,
            self::REPORT_FIELDS_VAT_PERCENTAGE,
            self::REPORT_FIELDS_VAT_AMOUNT,
            self::REPORT_FIELDS_PAYMENT_METHOD_FEE,
            self::REPORT_FIELDS_PAYMENT_METHOD_COMMISSION,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('request_type', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], 'default');
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('limit', $data ?? [], 50000);
        $this->setIfExists('report_fields', $data ?? [], null);
        $this->setIfExists('submerchant', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_type'] === null) {
            $invalidProperties[] = "'request_type' can't be null";
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!is_null($this->container['request_type']) && !in_array($this->container['request_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_type', must be one of '%s'",
                $this->container['request_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['callback_url'] === null) {
            $invalidProperties[] = "'callback_url' can't be null";
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['limit']) && ($this->container['limit'] > 50000)) {
            $invalidProperties[] = "invalid value for 'limit', must be smaller than or equal to 50000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_type
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['request_type'];
    }

    /**
     * Sets request_type
     *
     * @param string $request_type In which format is the report delivered in
     *
     * @return self
     */
    public function setRequestType($request_type)
    {
        if (is_null($request_type)) {
            throw new \InvalidArgumentException('non-nullable request_type cannot be null');
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!in_array($request_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_type', must be one of '%s'",
                    $request_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_type'] = $request_type;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url To which URL is the report delivered to. Callback URLs must use HTTPS
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            throw new \InvalidArgumentException('non-nullable callback_url cannot be null');
        }
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status How are the payments statuses filtered. \"Default\" includes both paid and settled payments. \"Paid\" includes paid payments that have not been settled yet. \"All\" includes everything, for example unpaid or failed payments.
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Filter out payments created before given datetime.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Filter out payments created after given datetime.
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int|null
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int|null $limit Limit the amount of payments included in the report.
     *
     * @return self
     */
    public function setLimit($limit)
    {
        if (is_null($limit)) {
            throw new \InvalidArgumentException('non-nullable limit cannot be null');
        }

        if (($limit > 50000)) {
            throw new \InvalidArgumentException('invalid value for $limit when calling PaymentReportRequest., must be smaller than or equal to 50000.');
        }

        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets report_fields
     *
     * @return string[]|null
     */
    public function getReportFields()
    {
        return $this->container['report_fields'];
    }

    /**
     * Sets report_fields
     *
     * @param string[]|null $report_fields Limit the amount of fields included in the report. By default all fields are included.
     *
     * @return self
     */
    public function setReportFields($report_fields)
    {
        if (is_null($report_fields)) {
            throw new \InvalidArgumentException('non-nullable report_fields cannot be null');
        }
        $allowedValues = $this->getReportFieldsAllowableValues();
        if (array_diff($report_fields, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'report_fields', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_fields'] = $report_fields;

        return $this;
    }

    /**
     * Gets submerchant
     *
     * @return int|null
     */
    public function getSubmerchant()
    {
        return $this->container['submerchant'];
    }

    /**
     * Sets submerchant
     *
     * @param int|null $submerchant Get submerchant's payment report
     *
     * @return self
     */
    public function setSubmerchant($submerchant)
    {
        if (is_null($submerchant)) {
            throw new \InvalidArgumentException('non-nullable submerchant cannot be null');
        }
        $this->container['submerchant'] = $submerchant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


