<?php
/**
 * Card
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Model;

use \ArrayAccess;
use \Paytrail\Payment\ObjectSerializer;

/**
 * Card Class Doc Comment
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Card implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Card';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'partial_pan' => 'string',
        'expire_year' => 'string',
        'expire_month' => 'string',
        'cvc_required' => 'string',
        'bin' => 'string',
        'funding' => 'string',
        'country_code' => 'string',
        'category' => 'string',
        'card_fingerprint' => 'string',
        'pan_fingerprint' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'partial_pan' => null,
        'expire_year' => null,
        'expire_month' => null,
        'cvc_required' => null,
        'bin' => null,
        'funding' => null,
        'country_code' => null,
        'category' => null,
        'card_fingerprint' => null,
        'pan_fingerprint' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'partial_pan' => false,
		'expire_year' => false,
		'expire_month' => false,
		'cvc_required' => false,
		'bin' => false,
		'funding' => false,
		'country_code' => false,
		'category' => false,
		'card_fingerprint' => false,
		'pan_fingerprint' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'partial_pan' => 'partial_pan',
        'expire_year' => 'expire_year',
        'expire_month' => 'expire_month',
        'cvc_required' => 'cvc_required',
        'bin' => 'bin',
        'funding' => 'funding',
        'country_code' => 'country_code',
        'category' => 'category',
        'card_fingerprint' => 'card_fingerprint',
        'pan_fingerprint' => 'pan_fingerprint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'partial_pan' => 'setPartialPan',
        'expire_year' => 'setExpireYear',
        'expire_month' => 'setExpireMonth',
        'cvc_required' => 'setCvcRequired',
        'bin' => 'setBin',
        'funding' => 'setFunding',
        'country_code' => 'setCountryCode',
        'category' => 'setCategory',
        'card_fingerprint' => 'setCardFingerprint',
        'pan_fingerprint' => 'setPanFingerprint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'partial_pan' => 'getPartialPan',
        'expire_year' => 'getExpireYear',
        'expire_month' => 'getExpireMonth',
        'cvc_required' => 'getCvcRequired',
        'bin' => 'getBin',
        'funding' => 'getFunding',
        'country_code' => 'getCountryCode',
        'category' => 'getCategory',
        'card_fingerprint' => 'getCardFingerprint',
        'pan_fingerprint' => 'getPanFingerprint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('partial_pan', $data ?? [], null);
        $this->setIfExists('expire_year', $data ?? [], null);
        $this->setIfExists('expire_month', $data ?? [], null);
        $this->setIfExists('cvc_required', $data ?? [], null);
        $this->setIfExists('bin', $data ?? [], null);
        $this->setIfExists('funding', $data ?? [], null);
        $this->setIfExists('country_code', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('card_fingerprint', $data ?? [], null);
        $this->setIfExists('pan_fingerprint', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Card type, for example ‘Visa’
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets partial_pan
     *
     * @return string|null
     */
    public function getPartialPan()
    {
        return $this->container['partial_pan'];
    }

    /**
     * Sets partial_pan
     *
     * @param string|null $partial_pan Last four digits of the card
     *
     * @return self
     */
    public function setPartialPan($partial_pan)
    {
        if (is_null($partial_pan)) {
            throw new \InvalidArgumentException('non-nullable partial_pan cannot be null');
        }
        $this->container['partial_pan'] = $partial_pan;

        return $this;
    }

    /**
     * Gets expire_year
     *
     * @return string|null
     */
    public function getExpireYear()
    {
        return $this->container['expire_year'];
    }

    /**
     * Sets expire_year
     *
     * @param string|null $expire_year Card expiration year
     *
     * @return self
     */
    public function setExpireYear($expire_year)
    {
        if (is_null($expire_year)) {
            throw new \InvalidArgumentException('non-nullable expire_year cannot be null');
        }
        $this->container['expire_year'] = $expire_year;

        return $this;
    }

    /**
     * Gets expire_month
     *
     * @return string|null
     */
    public function getExpireMonth()
    {
        return $this->container['expire_month'];
    }

    /**
     * Sets expire_month
     *
     * @param string|null $expire_month Card expiration month
     *
     * @return self
     */
    public function setExpireMonth($expire_month)
    {
        if (is_null($expire_month)) {
            throw new \InvalidArgumentException('non-nullable expire_month cannot be null');
        }
        $this->container['expire_month'] = $expire_month;

        return $this;
    }

    /**
     * Gets cvc_required
     *
     * @return string|null
     */
    public function getCvcRequired()
    {
        return $this->container['cvc_required'];
    }

    /**
     * Sets cvc_required
     *
     * @param string|null $cvc_required Whether the CVC is required for paying with this card. Can be one of yes, no or not_tested.
     *
     * @return self
     */
    public function setCvcRequired($cvc_required)
    {
        if (is_null($cvc_required)) {
            throw new \InvalidArgumentException('non-nullable cvc_required cannot be null');
        }
        $this->container['cvc_required'] = $cvc_required;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string|null
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string|null $bin First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)
     *
     * @return self
     */
    public function setBin($bin)
    {
        if (is_null($bin)) {
            throw new \InvalidArgumentException('non-nullable bin cannot be null');
        }
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets funding
     *
     * @return string|null
     */
    public function getFunding()
    {
        return $this->container['funding'];
    }

    /**
     * Sets funding
     *
     * @param string|null $funding credit, debit or unknown
     *
     * @return self
     */
    public function setFunding($funding)
    {
        if (is_null($funding)) {
            throw new \InvalidArgumentException('non-nullable funding cannot be null');
        }
        $this->container['funding'] = $funding;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code e.g. FI
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (is_null($country_code)) {
            throw new \InvalidArgumentException('non-nullable country_code cannot be null');
        }
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category business, prepaid or unknown
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets card_fingerprint
     *
     * @return string|null
     */
    public function getCardFingerprint()
    {
        return $this->container['card_fingerprint'];
    }

    /**
     * Sets card_fingerprint
     *
     * @param string|null $card_fingerprint Identifies a specific card number. Cards with the same PAN but different expiry dates will have the same PAN fingerprint. Hex string of length 64.
     *
     * @return self
     */
    public function setCardFingerprint($card_fingerprint)
    {
        if (is_null($card_fingerprint)) {
            throw new \InvalidArgumentException('non-nullable card_fingerprint cannot be null');
        }
        $this->container['card_fingerprint'] = $card_fingerprint;

        return $this;
    }

    /**
     * Gets pan_fingerprint
     *
     * @return string|null
     */
    public function getPanFingerprint()
    {
        return $this->container['pan_fingerprint'];
    }

    /**
     * Sets pan_fingerprint
     *
     * @param string|null $pan_fingerprint Identifies a specific card, including the expiry date. Hex string of length 64.
     *
     * @return self
     */
    public function setPanFingerprint($pan_fingerprint)
    {
        if (is_null($pan_fingerprint)) {
            throw new \InvalidArgumentException('non-nullable pan_fingerprint cannot be null');
        }
        $this->container['pan_fingerprint'] = $pan_fingerprint;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


