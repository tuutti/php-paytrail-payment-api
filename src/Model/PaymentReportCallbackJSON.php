<?php
/**
 * PaymentReportCallbackJSON
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Model;

use \ArrayAccess;
use \Paytrail\Payment\ObjectSerializer;

/**
 * PaymentReportCallbackJSON Class Doc Comment
 *
 * @category Class
 * @description The returned fields can be filtered out by specifying \&quot;reportFields\&quot; parameter
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentReportCallbackJSON implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentReportCallbackJSON';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_date' => 'string',
        'created' => 'string',
        'amount' => 'float',
        'status' => 'string',
        'firstname' => 'string',
        'familyname' => 'string',
        'description' => 'string',
        'reference' => 'string',
        'payment_method' => 'string',
        'stamp' => 'string',
        'address' => 'string',
        'postcode' => 'string',
        'postoffice' => 'string',
        'country' => 'string',
        'checkout_reference' => 'string',
        'archive_number' => 'string',
        'payer_name' => 'string',
        'settlement_id' => 'float',
        'settlement_date' => 'string',
        'original_trade_reference' => 'string',
        'vat_percentage' => 'float',
        'vat_amount' => 'float',
        'payment_method_fee' => 'float',
        'payment_method_commission' => 'float',
        'shop_in_shop_commission' => 'float',
        'shop_in_shop_commission_vat_percentage' => 'float',
        'shop_in_shop_commission_vat_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_date' => 'DD-MM-YYYY',
        'created' => 'HH:mm',
        'amount' => null,
        'status' => null,
        'firstname' => null,
        'familyname' => null,
        'description' => 'datetime',
        'reference' => null,
        'payment_method' => null,
        'stamp' => null,
        'address' => null,
        'postcode' => null,
        'postoffice' => null,
        'country' => null,
        'checkout_reference' => null,
        'archive_number' => null,
        'payer_name' => null,
        'settlement_id' => null,
        'settlement_date' => 'DD-MM-YYYY',
        'original_trade_reference' => null,
        'vat_percentage' => 'float',
        'vat_amount' => 'float',
        'payment_method_fee' => 'float',
        'payment_method_commission' => 'float',
        'shop_in_shop_commission' => 'float',
        'shop_in_shop_commission_vat_percentage' => 'float',
        'shop_in_shop_commission_vat_amount' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_date' => 'entryDate',
        'created' => 'created',
        'amount' => 'amount',
        'status' => 'status',
        'firstname' => 'firstname',
        'familyname' => 'familyname',
        'description' => 'description',
        'reference' => 'reference',
        'payment_method' => 'paymentMethod',
        'stamp' => 'stamp',
        'address' => 'address',
        'postcode' => 'postcode',
        'postoffice' => 'postoffice',
        'country' => 'country',
        'checkout_reference' => 'checkoutReference',
        'archive_number' => 'archiveNumber',
        'payer_name' => 'payerName',
        'settlement_id' => 'settlementId',
        'settlement_date' => 'settlementDate',
        'original_trade_reference' => 'originalTradeReference',
        'vat_percentage' => 'vatPercentage',
        'vat_amount' => 'vatAmount',
        'payment_method_fee' => 'paymentMethodFee',
        'payment_method_commission' => 'paymentMethodCommission',
        'shop_in_shop_commission' => 'shopInShopCommission',
        'shop_in_shop_commission_vat_percentage' => 'shopInShopCommissionVatPercentage',
        'shop_in_shop_commission_vat_amount' => 'shopInShopCommissionVatAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_date' => 'setEntryDate',
        'created' => 'setCreated',
        'amount' => 'setAmount',
        'status' => 'setStatus',
        'firstname' => 'setFirstname',
        'familyname' => 'setFamilyname',
        'description' => 'setDescription',
        'reference' => 'setReference',
        'payment_method' => 'setPaymentMethod',
        'stamp' => 'setStamp',
        'address' => 'setAddress',
        'postcode' => 'setPostcode',
        'postoffice' => 'setPostoffice',
        'country' => 'setCountry',
        'checkout_reference' => 'setCheckoutReference',
        'archive_number' => 'setArchiveNumber',
        'payer_name' => 'setPayerName',
        'settlement_id' => 'setSettlementId',
        'settlement_date' => 'setSettlementDate',
        'original_trade_reference' => 'setOriginalTradeReference',
        'vat_percentage' => 'setVatPercentage',
        'vat_amount' => 'setVatAmount',
        'payment_method_fee' => 'setPaymentMethodFee',
        'payment_method_commission' => 'setPaymentMethodCommission',
        'shop_in_shop_commission' => 'setShopInShopCommission',
        'shop_in_shop_commission_vat_percentage' => 'setShopInShopCommissionVatPercentage',
        'shop_in_shop_commission_vat_amount' => 'setShopInShopCommissionVatAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_date' => 'getEntryDate',
        'created' => 'getCreated',
        'amount' => 'getAmount',
        'status' => 'getStatus',
        'firstname' => 'getFirstname',
        'familyname' => 'getFamilyname',
        'description' => 'getDescription',
        'reference' => 'getReference',
        'payment_method' => 'getPaymentMethod',
        'stamp' => 'getStamp',
        'address' => 'getAddress',
        'postcode' => 'getPostcode',
        'postoffice' => 'getPostoffice',
        'country' => 'getCountry',
        'checkout_reference' => 'getCheckoutReference',
        'archive_number' => 'getArchiveNumber',
        'payer_name' => 'getPayerName',
        'settlement_id' => 'getSettlementId',
        'settlement_date' => 'getSettlementDate',
        'original_trade_reference' => 'getOriginalTradeReference',
        'vat_percentage' => 'getVatPercentage',
        'vat_amount' => 'getVatAmount',
        'payment_method_fee' => 'getPaymentMethodFee',
        'payment_method_commission' => 'getPaymentMethodCommission',
        'shop_in_shop_commission' => 'getShopInShopCommission',
        'shop_in_shop_commission_vat_percentage' => 'getShopInShopCommissionVatPercentage',
        'shop_in_shop_commission_vat_amount' => 'getShopInShopCommissionVatAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS__NEW = 'New';
    const STATUS_PAID = 'Paid';
    const STATUS_WAITING_FOR_APPROVAL = 'waiting for approval';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_TIMEOUT = 'Timeout';
    const STATUS_HALTED = 'Halted';
    const STATUS_DELAYED = 'Delayed';
    const STATUS_PAID_AND_SETTLED = 'Paid and settled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS__NEW,
            self::STATUS_PAID,
            self::STATUS_WAITING_FOR_APPROVAL,
            self::STATUS_CANCELLED,
            self::STATUS_TIMEOUT,
            self::STATUS_HALTED,
            self::STATUS_DELAYED,
            self::STATUS_PAID_AND_SETTLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entry_date'] = $data['entry_date'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['firstname'] = $data['firstname'] ?? null;
        $this->container['familyname'] = $data['familyname'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['payment_method'] = $data['payment_method'] ?? null;
        $this->container['stamp'] = $data['stamp'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['postcode'] = $data['postcode'] ?? null;
        $this->container['postoffice'] = $data['postoffice'] ?? null;
        $this->container['country'] = $data['country'] ?? null;
        $this->container['checkout_reference'] = $data['checkout_reference'] ?? null;
        $this->container['archive_number'] = $data['archive_number'] ?? null;
        $this->container['payer_name'] = $data['payer_name'] ?? null;
        $this->container['settlement_id'] = $data['settlement_id'] ?? null;
        $this->container['settlement_date'] = $data['settlement_date'] ?? null;
        $this->container['original_trade_reference'] = $data['original_trade_reference'] ?? null;
        $this->container['vat_percentage'] = $data['vat_percentage'] ?? null;
        $this->container['vat_amount'] = $data['vat_amount'] ?? null;
        $this->container['payment_method_fee'] = $data['payment_method_fee'] ?? null;
        $this->container['payment_method_commission'] = $data['payment_method_commission'] ?? null;
        $this->container['shop_in_shop_commission'] = $data['shop_in_shop_commission'] ?? null;
        $this->container['shop_in_shop_commission_vat_percentage'] = $data['shop_in_shop_commission_vat_percentage'] ?? null;
        $this->container['shop_in_shop_commission_vat_amount'] = $data['shop_in_shop_commission_vat_amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_date
     *
     * @return string|null
     */
    public function getEntryDate()
    {
        return $this->container['entry_date'];
    }

    /**
     * Sets entry_date
     *
     * @param string|null $entry_date When the payment was paid or initialized
     *
     * @return self
     */
    public function setEntryDate($entry_date)
    {
        $this->container['entry_date'] = $entry_date;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created Hour and minute of the payment creation
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Payment amount in Euros
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Payment status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname First name
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets familyname
     *
     * @return string|null
     */
    public function getFamilyname()
    {
        return $this->container['familyname'];
    }

    /**
     * Sets familyname
     *
     * @param string|null $familyname Last name
     *
     * @return self
     */
    public function setFamilyname($familyname)
    {
        $this->container['familyname'] = $familyname;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Payment description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Merchant's reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method Payment method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets stamp
     *
     * @return string|null
     */
    public function getStamp()
    {
        return $this->container['stamp'];
    }

    /**
     * Sets stamp
     *
     * @param string|null $stamp Payment Stamp
     *
     * @return self
     */
    public function setStamp($stamp)
    {
        $this->container['stamp'] = $stamp;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Delivery address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode Postal code
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets postoffice
     *
     * @return string|null
     */
    public function getPostoffice()
    {
        return $this->container['postoffice'];
    }

    /**
     * Sets postoffice
     *
     * @param string|null $postoffice Post office
     *
     * @return self
     */
    public function setPostoffice($postoffice)
    {
        $this->container['postoffice'] = $postoffice;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of delivery
     *
     * @return self
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets checkout_reference
     *
     * @return string|null
     */
    public function getCheckoutReference()
    {
        return $this->container['checkout_reference'];
    }

    /**
     * Sets checkout_reference
     *
     * @param string|null $checkout_reference Checkout reference
     *
     * @return self
     */
    public function setCheckoutReference($checkout_reference)
    {
        $this->container['checkout_reference'] = $checkout_reference;

        return $this;
    }

    /**
     * Gets archive_number
     *
     * @return string|null
     */
    public function getArchiveNumber()
    {
        return $this->container['archive_number'];
    }

    /**
     * Sets archive_number
     *
     * @param string|null $archive_number Archive number
     *
     * @return self
     */
    public function setArchiveNumber($archive_number)
    {
        $this->container['archive_number'] = $archive_number;

        return $this;
    }

    /**
     * Gets payer_name
     *
     * @return string|null
     */
    public function getPayerName()
    {
        return $this->container['payer_name'];
    }

    /**
     * Sets payer_name
     *
     * @param string|null $payer_name Name from bank
     *
     * @return self
     */
    public function setPayerName($payer_name)
    {
        $this->container['payer_name'] = $payer_name;

        return $this;
    }

    /**
     * Gets settlement_id
     *
     * @return float|null
     */
    public function getSettlementId()
    {
        return $this->container['settlement_id'];
    }

    /**
     * Sets settlement_id
     *
     * @param float|null $settlement_id Settlement (report) id
     *
     * @return self
     */
    public function setSettlementId($settlement_id)
    {
        $this->container['settlement_id'] = $settlement_id;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return string|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param string|null $settlement_date When the payment is settled
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets original_trade_reference
     *
     * @return string|null
     */
    public function getOriginalTradeReference()
    {
        return $this->container['original_trade_reference'];
    }

    /**
     * Sets original_trade_reference
     *
     * @param string|null $original_trade_reference Merchant's reference of the original payment in case of refund
     *
     * @return self
     */
    public function setOriginalTradeReference($original_trade_reference)
    {
        $this->container['original_trade_reference'] = $original_trade_reference;

        return $this;
    }

    /**
     * Gets vat_percentage
     *
     * @return float|null
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param float|null $vat_percentage Payment VAT percentage
     *
     * @return self
     */
    public function setVatPercentage($vat_percentage)
    {
        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount Payment VAT amount in Euros
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets payment_method_fee
     *
     * @return float|null
     */
    public function getPaymentMethodFee()
    {
        return $this->container['payment_method_fee'];
    }

    /**
     * Sets payment_method_fee
     *
     * @param float|null $payment_method_fee Payment method fee in Euros
     *
     * @return self
     */
    public function setPaymentMethodFee($payment_method_fee)
    {
        $this->container['payment_method_fee'] = $payment_method_fee;

        return $this;
    }

    /**
     * Gets payment_method_commission
     *
     * @return float|null
     */
    public function getPaymentMethodCommission()
    {
        return $this->container['payment_method_commission'];
    }

    /**
     * Sets payment_method_commission
     *
     * @param float|null $payment_method_commission Payment method commission amount in Euros
     *
     * @return self
     */
    public function setPaymentMethodCommission($payment_method_commission)
    {
        $this->container['payment_method_commission'] = $payment_method_commission;

        return $this;
    }

    /**
     * Gets shop_in_shop_commission
     *
     * @return float|null
     */
    public function getShopInShopCommission()
    {
        return $this->container['shop_in_shop_commission'];
    }

    /**
     * Sets shop_in_shop_commission
     *
     * @param float|null $shop_in_shop_commission Payment method commission amount in Euros
     *
     * @return self
     */
    public function setShopInShopCommission($shop_in_shop_commission)
    {
        $this->container['shop_in_shop_commission'] = $shop_in_shop_commission;

        return $this;
    }

    /**
     * Gets shop_in_shop_commission_vat_percentage
     *
     * @return float|null
     */
    public function getShopInShopCommissionVatPercentage()
    {
        return $this->container['shop_in_shop_commission_vat_percentage'];
    }

    /**
     * Sets shop_in_shop_commission_vat_percentage
     *
     * @param float|null $shop_in_shop_commission_vat_percentage Payment method commission VAT percentage
     *
     * @return self
     */
    public function setShopInShopCommissionVatPercentage($shop_in_shop_commission_vat_percentage)
    {
        $this->container['shop_in_shop_commission_vat_percentage'] = $shop_in_shop_commission_vat_percentage;

        return $this;
    }

    /**
     * Gets shop_in_shop_commission_vat_amount
     *
     * @return float|null
     */
    public function getShopInShopCommissionVatAmount()
    {
        return $this->container['shop_in_shop_commission_vat_amount'];
    }

    /**
     * Sets shop_in_shop_commission_vat_amount
     *
     * @param float|null $shop_in_shop_commission_vat_amount Payment method commission VAT amount in Euros
     *
     * @return self
     */
    public function setShopInShopCommissionVatAmount($shop_in_shop_commission_vat_amount)
    {
        $this->container['shop_in_shop_commission_vat_amount'] = $shop_in_shop_commission_vat_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


