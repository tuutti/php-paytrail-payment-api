<?php
/**
 * PaymentReportBySettlementIdRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Model;

use \ArrayAccess;
use \Paytrail\Payment\ObjectSerializer;

/**
 * PaymentReportBySettlementIdRequest Class Doc Comment
 *
 * @category Class
 * @description Payment report request
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PaymentReportBySettlementIdRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PaymentReportBySettlementIdRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'request_type' => 'string',
        'callback_url' => 'string',
        'report_fields' => 'string[]',
        'submerchant' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'request_type' => null,
        'callback_url' => 'url',
        'report_fields' => null,
        'submerchant' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_type' => 'requestType',
        'callback_url' => 'callbackUrl',
        'report_fields' => 'reportFields',
        'submerchant' => 'submerchant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_type' => 'setRequestType',
        'callback_url' => 'setCallbackUrl',
        'report_fields' => 'setReportFields',
        'submerchant' => 'setSubmerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_type' => 'getRequestType',
        'callback_url' => 'getCallbackUrl',
        'report_fields' => 'getReportFields',
        'submerchant' => 'getSubmerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const REQUEST_TYPE_JSON = 'json';
    const REQUEST_TYPE_CSV = 'csv';
    const REPORT_FIELDS_ENTRY_DATE = 'entryDate';
    const REPORT_FIELDS_CREATED = 'created';
    const REPORT_FIELDS_AMOUNT = 'amount';
    const REPORT_FIELDS_STATUS = 'status';
    const REPORT_FIELDS_FIRSTNAME = 'firstname';
    const REPORT_FIELDS_FAMILYNAME = 'familyname';
    const REPORT_FIELDS_DESCRIPTION = 'description';
    const REPORT_FIELDS_REFERENCE = 'reference';
    const REPORT_FIELDS_PAYMENT_METHOD = 'paymentMethod';
    const REPORT_FIELDS_STAMP = 'stamp';
    const REPORT_FIELDS_ADDRESS = 'address';
    const REPORT_FIELDS_POSTCODE = 'postcode';
    const REPORT_FIELDS_POSTOFFICE = 'postoffice';
    const REPORT_FIELDS_COUNTRY = 'country';
    const REPORT_FIELDS_CHECKOUT_REFERENCE = 'checkoutReference';
    const REPORT_FIELDS_ARCHIVE_NUMBER = 'archiveNumber';
    const REPORT_FIELDS_PAYER_NAME = 'payerName';
    const REPORT_FIELDS_SETTLEMENT_ID = 'settlementId';
    const REPORT_FIELDS_SETTLEMENT_DATE = 'settlementDate';
    const REPORT_FIELDS_ORIGINAL_TRADE_REFERENCE = 'originalTradeReference';
    const REPORT_FIELDS_VAT_PERCENTAGE = 'vatPercentage';
    const REPORT_FIELDS_VAT_AMOUNT = 'vatAmount';
    const REPORT_FIELDS_PAYMENT_METHOD_FEE = 'paymentMethodFee';
    const REPORT_FIELDS_PAYMENT_METHOD_COMMISSION = 'paymentMethodCommission';
    const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION = 'shopInShopCommission';
    const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE = 'shopInShopCommissionVatPercentage';
    const REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT = 'shopInShopCommissionVatAmount';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestTypeAllowableValues()
    {
        return [
            self::REQUEST_TYPE_JSON,
            self::REQUEST_TYPE_CSV,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportFieldsAllowableValues()
    {
        return [
            self::REPORT_FIELDS_ENTRY_DATE,
            self::REPORT_FIELDS_CREATED,
            self::REPORT_FIELDS_AMOUNT,
            self::REPORT_FIELDS_STATUS,
            self::REPORT_FIELDS_FIRSTNAME,
            self::REPORT_FIELDS_FAMILYNAME,
            self::REPORT_FIELDS_DESCRIPTION,
            self::REPORT_FIELDS_REFERENCE,
            self::REPORT_FIELDS_PAYMENT_METHOD,
            self::REPORT_FIELDS_STAMP,
            self::REPORT_FIELDS_ADDRESS,
            self::REPORT_FIELDS_POSTCODE,
            self::REPORT_FIELDS_POSTOFFICE,
            self::REPORT_FIELDS_COUNTRY,
            self::REPORT_FIELDS_CHECKOUT_REFERENCE,
            self::REPORT_FIELDS_ARCHIVE_NUMBER,
            self::REPORT_FIELDS_PAYER_NAME,
            self::REPORT_FIELDS_SETTLEMENT_ID,
            self::REPORT_FIELDS_SETTLEMENT_DATE,
            self::REPORT_FIELDS_ORIGINAL_TRADE_REFERENCE,
            self::REPORT_FIELDS_VAT_PERCENTAGE,
            self::REPORT_FIELDS_VAT_AMOUNT,
            self::REPORT_FIELDS_PAYMENT_METHOD_FEE,
            self::REPORT_FIELDS_PAYMENT_METHOD_COMMISSION,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_PERCENTAGE,
            self::REPORT_FIELDS_SHOP_IN_SHOP_COMMISSION_VAT_AMOUNT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_type'] = $data['request_type'] ?? null;
        $this->container['callback_url'] = $data['callback_url'] ?? null;
        $this->container['report_fields'] = $data['report_fields'] ?? null;
        $this->container['submerchant'] = $data['submerchant'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_type'] === null) {
            $invalidProperties[] = "'request_type' can't be null";
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!is_null($this->container['request_type']) && !in_array($this->container['request_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'request_type', must be one of '%s'",
                $this->container['request_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['callback_url'] === null) {
            $invalidProperties[] = "'callback_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_type
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['request_type'];
    }

    /**
     * Sets request_type
     *
     * @param string $request_type In which format is the report delivered in
     *
     * @return self
     */
    public function setRequestType($request_type)
    {
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!in_array($request_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'request_type', must be one of '%s'",
                    $request_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_type'] = $request_type;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string $callback_url To which URL is the report delivered to
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets report_fields
     *
     * @return string[]|null
     */
    public function getReportFields()
    {
        return $this->container['report_fields'];
    }

    /**
     * Sets report_fields
     *
     * @param string[]|null $report_fields Limit the amount of fields included in the report. By default all fields are included.
     *
     * @return self
     */
    public function setReportFields($report_fields)
    {
        $allowedValues = $this->getReportFieldsAllowableValues();
        if (!is_null($report_fields) && array_diff($report_fields, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'report_fields', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_fields'] = $report_fields;

        return $this;
    }

    /**
     * Gets submerchant
     *
     * @return int|null
     */
    public function getSubmerchant()
    {
        return $this->container['submerchant'];
    }

    /**
     * Sets submerchant
     *
     * @param int|null $submerchant Get submerchant's payment report
     *
     * @return self
     */
    public function setSubmerchant($submerchant)
    {
        $this->container['submerchant'] = $submerchant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


