<?php
/**
 * TokenPaymentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Payment API
 *
 * Paytrail Payment API
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Paytrail\Payment\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Paytrail\Payment\ApiException;
use Paytrail\Payment\Configuration;
use Paytrail\Payment\HeaderSelector;
use Paytrail\Payment\ObjectSerializer;

/**
 * TokenPaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Paytrail\Payment
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TokenPaymentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addCardForm' => [
            'application/json',
        ],
        'requestTokenForTokenizationId' => [
            'application/json',
        ],
        'tokenCitAuthorizationHold' => [
            'application/json',
        ],
        'tokenCitCharge' => [
            'application/json',
        ],
        'tokenCommit' => [
            'application/json',
        ],
        'tokenMitAuthorizationHold' => [
            'application/json',
        ],
        'tokenMitCharge' => [
            'application/json',
        ],
        'tokenRevert' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCardForm
     *
     * Request a redirect to card addition form
     *
     * @param  \Paytrail\Payment\Model\AddCardFormRequest $add_card_form_request Add card payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCardForm'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addCardForm($add_card_form_request, string $contentType = self::contentTypes['addCardForm'][0])
    {
        $this->addCardFormWithHttpInfo($add_card_form_request, $contentType);
    }

    /**
     * Operation addCardFormWithHttpInfo
     *
     * Request a redirect to card addition form
     *
     * @param  \Paytrail\Payment\Model\AddCardFormRequest $add_card_form_request Add card payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCardForm'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCardFormWithHttpInfo($add_card_form_request, string $contentType = self::contentTypes['addCardForm'][0])
    {
        $request = $this->addCardFormRequest($add_card_form_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCardFormAsync
     *
     * Request a redirect to card addition form
     *
     * @param  \Paytrail\Payment\Model\AddCardFormRequest $add_card_form_request Add card payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCardForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCardFormAsync($add_card_form_request, string $contentType = self::contentTypes['addCardForm'][0])
    {
        return $this->addCardFormAsyncWithHttpInfo($add_card_form_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCardFormAsyncWithHttpInfo
     *
     * Request a redirect to card addition form
     *
     * @param  \Paytrail\Payment\Model\AddCardFormRequest $add_card_form_request Add card payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCardForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCardFormAsyncWithHttpInfo($add_card_form_request, string $contentType = self::contentTypes['addCardForm'][0])
    {
        $returnType = '';
        $request = $this->addCardFormRequest($add_card_form_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCardForm'
     *
     * @param  \Paytrail\Payment\Model\AddCardFormRequest $add_card_form_request Add card payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCardForm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCardFormRequest($add_card_form_request, string $contentType = self::contentTypes['addCardForm'][0])
    {

        // verify the required parameter 'add_card_form_request' is set
        if ($add_card_form_request === null || (is_array($add_card_form_request) && count($add_card_form_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_card_form_request when calling addCardForm'
            );
        }


        $resourcePath = '/tokenization/addcard-form';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_card_form_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_card_form_request));
            } else {
                $httpBody = $add_card_form_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestTokenForTokenizationId
     *
     * Request a card token for given tokenization id
     *
     * @param  string $checkout_tokenization_id Tokenization id received from /tokenization/addcard-form (required)
     * @param  \Paytrail\Payment\Model\GetTokenRequest $get_token_request Tokenization request payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $checkout_tokenization_id2 Tokenization id received from /tokenization/addcard-form (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTokenForTokenizationId'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenizationRequestResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function requestTokenForTokenizationId($checkout_tokenization_id, $get_token_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $checkout_tokenization_id2 = null, $signature = null, string $contentType = self::contentTypes['requestTokenForTokenizationId'][0])
    {
        list($response) = $this->requestTokenForTokenizationIdWithHttpInfo($checkout_tokenization_id, $get_token_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $checkout_tokenization_id2, $signature, $contentType);
        return $response;
    }

    /**
     * Operation requestTokenForTokenizationIdWithHttpInfo
     *
     * Request a card token for given tokenization id
     *
     * @param  string $checkout_tokenization_id Tokenization id received from /tokenization/addcard-form (required)
     * @param  \Paytrail\Payment\Model\GetTokenRequest $get_token_request Tokenization request payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $checkout_tokenization_id2 Tokenization id received from /tokenization/addcard-form (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTokenForTokenizationId'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenizationRequestResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestTokenForTokenizationIdWithHttpInfo($checkout_tokenization_id, $get_token_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $checkout_tokenization_id2 = null, $signature = null, string $contentType = self::contentTypes['requestTokenForTokenizationId'][0])
    {
        $request = $this->requestTokenForTokenizationIdRequest($checkout_tokenization_id, $get_token_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $checkout_tokenization_id2, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Paytrail\Payment\Model\TokenizationRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenizationRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenizationRequestResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenizationRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenizationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestTokenForTokenizationIdAsync
     *
     * Request a card token for given tokenization id
     *
     * @param  string $checkout_tokenization_id Tokenization id received from /tokenization/addcard-form (required)
     * @param  \Paytrail\Payment\Model\GetTokenRequest $get_token_request Tokenization request payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $checkout_tokenization_id2 Tokenization id received from /tokenization/addcard-form (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTokenForTokenizationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestTokenForTokenizationIdAsync($checkout_tokenization_id, $get_token_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $checkout_tokenization_id2 = null, $signature = null, string $contentType = self::contentTypes['requestTokenForTokenizationId'][0])
    {
        return $this->requestTokenForTokenizationIdAsyncWithHttpInfo($checkout_tokenization_id, $get_token_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $checkout_tokenization_id2, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestTokenForTokenizationIdAsyncWithHttpInfo
     *
     * Request a card token for given tokenization id
     *
     * @param  string $checkout_tokenization_id Tokenization id received from /tokenization/addcard-form (required)
     * @param  \Paytrail\Payment\Model\GetTokenRequest $get_token_request Tokenization request payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $checkout_tokenization_id2 Tokenization id received from /tokenization/addcard-form (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTokenForTokenizationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestTokenForTokenizationIdAsyncWithHttpInfo($checkout_tokenization_id, $get_token_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $checkout_tokenization_id2 = null, $signature = null, string $contentType = self::contentTypes['requestTokenForTokenizationId'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenizationRequestResponse';
        $request = $this->requestTokenForTokenizationIdRequest($checkout_tokenization_id, $get_token_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $checkout_tokenization_id2, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestTokenForTokenizationId'
     *
     * @param  string $checkout_tokenization_id Tokenization id received from /tokenization/addcard-form (required)
     * @param  \Paytrail\Payment\Model\GetTokenRequest $get_token_request Tokenization request payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $checkout_tokenization_id2 Tokenization id received from /tokenization/addcard-form (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestTokenForTokenizationId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestTokenForTokenizationIdRequest($checkout_tokenization_id, $get_token_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $checkout_tokenization_id2 = null, $signature = null, string $contentType = self::contentTypes['requestTokenForTokenizationId'][0])
    {

        // verify the required parameter 'checkout_tokenization_id' is set
        if ($checkout_tokenization_id === null || (is_array($checkout_tokenization_id) && count($checkout_tokenization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_tokenization_id when calling requestTokenForTokenizationId'
            );
        }

        // verify the required parameter 'get_token_request' is set
        if ($get_token_request === null || (is_array($get_token_request) && count($get_token_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_token_request when calling requestTokenForTokenizationId'
            );
        }









        $resourcePath = '/tokenization/{checkout-tokenization-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($checkout_tokenization_id2 !== null) {
            $headerParams['checkout-tokenization-id'] = ObjectSerializer::toHeaderValue($checkout_tokenization_id2);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }

        // path params
        if ($checkout_tokenization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkout-tokenization-id' . '}',
                ObjectSerializer::toPathValue($checkout_tokenization_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_token_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_token_request));
            } else {
                $httpBody = $get_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenCitAuthorizationHold
     *
     * Request customer initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT authorization hold payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\TokenCITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenCitAuthorizationHold($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitAuthorizationHold'][0])
    {
        list($response) = $this->tokenCitAuthorizationHoldWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenCitAuthorizationHoldWithHttpInfo
     *
     * Request customer initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT authorization hold payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\TokenCITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenCitAuthorizationHoldWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitAuthorizationHold'][0])
    {
        $request = $this->tokenCitAuthorizationHoldRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Paytrail\Payment\Model\TokenCITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenCITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenCITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenCITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenCitAuthorizationHoldAsync
     *
     * Request customer initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT authorization hold payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCitAuthorizationHoldAsync($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitAuthorizationHold'][0])
    {
        return $this->tokenCitAuthorizationHoldAsyncWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenCitAuthorizationHoldAsyncWithHttpInfo
     *
     * Request customer initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT authorization hold payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCitAuthorizationHoldAsyncWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitAuthorizationHold'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenCitAuthorizationHoldRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenCitAuthorizationHold'
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT authorization hold payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenCitAuthorizationHoldRequest($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitAuthorizationHold'][0])
    {

        // verify the required parameter 'token_payment_request' is set
        if ($token_payment_request === null || (is_array($token_payment_request) && count($token_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_payment_request when calling tokenCitAuthorizationHold'
            );
        }








        $resourcePath = '/payments/token/cit/authorization-hold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($token_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($token_payment_request));
            } else {
                $httpBody = $token_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenCitCharge
     *
     * Request customer initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitCharge'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\TokenCITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenCitCharge($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitCharge'][0])
    {
        list($response) = $this->tokenCitChargeWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenCitChargeWithHttpInfo
     *
     * Request customer initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitCharge'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\TokenCITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenCitChargeWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitCharge'][0])
    {
        $request = $this->tokenCitChargeRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Paytrail\Payment\Model\TokenCITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenCITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenCITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenCITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenCitChargeAsync
     *
     * Request customer initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCitChargeAsync($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitCharge'][0])
    {
        return $this->tokenCitChargeAsyncWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenCitChargeAsyncWithHttpInfo
     *
     * Request customer initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCitChargeAsyncWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitCharge'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenCitChargeRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenCitCharge'
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenCitChargeRequest($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCitCharge'][0])
    {

        // verify the required parameter 'token_payment_request' is set
        if ($token_payment_request === null || (is_array($token_payment_request) && count($token_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_payment_request when calling tokenCitCharge'
            );
        }








        $resourcePath = '/payments/token/cit/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($token_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($token_payment_request));
            } else {
                $httpBody = $token_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenCommit
     *
     * Request committing (charging) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT commit payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCommit'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenCommit($transaction_id, $token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCommit'][0])
    {
        list($response) = $this->tokenCommitWithHttpInfo($transaction_id, $token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenCommitWithHttpInfo
     *
     * Request committing (charging) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT commit payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCommit'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenCommitWithHttpInfo($transaction_id, $token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCommit'][0])
    {
        $request = $this->tokenCommitRequest($transaction_id, $token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenCommitAsync
     *
     * Request committing (charging) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT commit payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCommit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCommitAsync($transaction_id, $token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCommit'][0])
    {
        return $this->tokenCommitAsyncWithHttpInfo($transaction_id, $token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenCommitAsyncWithHttpInfo
     *
     * Request committing (charging) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT commit payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCommit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenCommitAsyncWithHttpInfo($transaction_id, $token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCommit'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenCommitRequest($transaction_id, $token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenCommit'
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request CIT commit payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenCommit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenCommitRequest($transaction_id, $token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenCommit'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling tokenCommit'
            );
        }

        // verify the required parameter 'token_payment_request' is set
        if ($token_payment_request === null || (is_array($token_payment_request) && count($token_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_payment_request when calling tokenCommit'
            );
        }









        $resourcePath = '/payments/{transactionId}/token/commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_transaction_id !== null) {
            $headerParams['checkout-transaction-id'] = ObjectSerializer::toHeaderValue($checkout_transaction_id);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }

        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($token_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($token_payment_request));
            } else {
                $httpBody = $token_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenMitAuthorizationHold
     *
     * Request merchant initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenMitAuthorizationHold($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitAuthorizationHold'][0])
    {
        list($response) = $this->tokenMitAuthorizationHoldWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenMitAuthorizationHoldWithHttpInfo
     *
     * Request merchant initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenMitAuthorizationHoldWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitAuthorizationHold'][0])
    {
        $request = $this->tokenMitAuthorizationHoldRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenMitAuthorizationHoldAsync
     *
     * Request merchant initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenMitAuthorizationHoldAsync($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitAuthorizationHold'][0])
    {
        return $this->tokenMitAuthorizationHoldAsyncWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenMitAuthorizationHoldAsyncWithHttpInfo
     *
     * Request merchant initiated transaction authorization hold on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenMitAuthorizationHoldAsyncWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitAuthorizationHold'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenMitAuthorizationHoldRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenMitAuthorizationHold'
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitAuthorizationHold'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenMitAuthorizationHoldRequest($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitAuthorizationHold'][0])
    {

        // verify the required parameter 'token_payment_request' is set
        if ($token_payment_request === null || (is_array($token_payment_request) && count($token_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_payment_request when calling tokenMitAuthorizationHold'
            );
        }








        $resourcePath = '/payments/token/mit/authorization-hold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($token_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($token_payment_request));
            } else {
                $httpBody = $token_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenMitCharge
     *
     * Request merchant initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitCharge'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenMitCharge($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitCharge'][0])
    {
        list($response) = $this->tokenMitChargeWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenMitChargeWithHttpInfo
     *
     * Request merchant initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitCharge'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenMitChargeWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitCharge'][0])
    {
        $request = $this->tokenMitChargeRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenMitChargeAsync
     *
     * Request merchant initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenMitChargeAsync($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitCharge'][0])
    {
        return $this->tokenMitChargeAsyncWithHttpInfo($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenMitChargeAsyncWithHttpInfo
     *
     * Request merchant initiated transaction charge on token
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenMitChargeAsyncWithHttpInfo($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitCharge'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenMitChargeRequest($token_payment_request, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenMitCharge'
     *
     * @param  \Paytrail\Payment\Model\TokenPaymentRequest $token_payment_request MIT Charge payload (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenMitCharge'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenMitChargeRequest($token_payment_request, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenMitCharge'][0])
    {

        // verify the required parameter 'token_payment_request' is set
        if ($token_payment_request === null || (is_array($token_payment_request) && count($token_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_payment_request when calling tokenMitCharge'
            );
        }








        $resourcePath = '/payments/token/mit/charge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($token_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($token_payment_request));
            } else {
                $httpBody = $token_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tokenRevert
     *
     * Revert (removal) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRevert'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error
     */
    public function tokenRevert($transaction_id, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenRevert'][0])
    {
        list($response) = $this->tokenRevertWithHttpInfo($transaction_id, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);
        return $response;
    }

    /**
     * Operation tokenRevertWithHttpInfo
     *
     * Revert (removal) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRevert'] to see the possible values for this operation
     *
     * @throws \Paytrail\Payment\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Paytrail\Payment\Model\TokenMITPaymentResponse|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error|\Paytrail\Payment\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenRevertWithHttpInfo($transaction_id, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenRevert'][0])
    {
        $request = $this->tokenRevertRequest($transaction_id, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\TokenMITPaymentResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\TokenMITPaymentResponse', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Paytrail\Payment\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Paytrail\Payment\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Paytrail\Payment\Model\Error', []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                (string) $response->getBody(),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\TokenMITPaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Paytrail\Payment\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenRevertAsync
     *
     * Revert (removal) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenRevertAsync($transaction_id, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenRevert'][0])
    {
        return $this->tokenRevertAsyncWithHttpInfo($transaction_id, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenRevertAsyncWithHttpInfo
     *
     * Revert (removal) of previously created authorization hold on token
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tokenRevertAsyncWithHttpInfo($transaction_id, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenRevert'][0])
    {
        $returnType = '\Paytrail\Payment\Model\TokenMITPaymentResponse';
        $request = $this->tokenRevertRequest($transaction_id, $checkout_account, $checkout_algorithm, $checkout_method, $checkout_transaction_id, $checkout_timestamp, $checkout_nonce, $signature, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        (string) $response->getBody(),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tokenRevert'
     *
     * @param  string $transaction_id The transaction ID (required)
     * @param  int $checkout_account Merchant ID (optional)
     * @param  string $checkout_algorithm HMAC algorithm (optional)
     * @param  string $checkout_method HTTP method of the request (optional)
     * @param  string $checkout_transaction_id The same transaction ID as in route (optional)
     * @param  \DateTime $checkout_timestamp Current timestamp in ISO 8601 format (optional)
     * @param  string $checkout_nonce Unique random identifier (optional)
     * @param  string $signature HMAC signature calculated over the request headers and payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['tokenRevert'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function tokenRevertRequest($transaction_id, $checkout_account = null, $checkout_algorithm = null, $checkout_method = null, $checkout_transaction_id = null, $checkout_timestamp = null, $checkout_nonce = null, $signature = null, string $contentType = self::contentTypes['tokenRevert'][0])
    {

        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling tokenRevert'
            );
        }









        $resourcePath = '/payments/{transactionId}/token/revert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($checkout_account !== null) {
            $headerParams['checkout-account'] = ObjectSerializer::toHeaderValue($checkout_account);
        }
        // header params
        if ($checkout_algorithm !== null) {
            $headerParams['checkout-algorithm'] = ObjectSerializer::toHeaderValue($checkout_algorithm);
        }
        // header params
        if ($checkout_method !== null) {
            $headerParams['checkout-method'] = ObjectSerializer::toHeaderValue($checkout_method);
        }
        // header params
        if ($checkout_transaction_id !== null) {
            $headerParams['checkout-transaction-id'] = ObjectSerializer::toHeaderValue($checkout_transaction_id);
        }
        // header params
        if ($checkout_timestamp !== null) {
            $headerParams['checkout-timestamp'] = ObjectSerializer::toHeaderValue($checkout_timestamp);
        }
        // header params
        if ($checkout_nonce !== null) {
            $headerParams['checkout-nonce'] = ObjectSerializer::toHeaderValue($checkout_nonce);
        }
        // header params
        if ($signature !== null) {
            $headerParams['signature'] = ObjectSerializer::toHeaderValue($signature);
        }

        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
